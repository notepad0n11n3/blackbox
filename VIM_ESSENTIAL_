
				:q  !=  q:          q:  ==  : Ctrl-f  (Ctrl-c  para poder usar Ctrl j)      'salir de q:   ("Ctrl \ n"  o  "Ctrl w c")'				vim:: Ex == E

									|  ==   &&  like unix                       ' vim:: c_Ctl-r % '  "ruta archivo actual... <3 <3 <3"
																		
																			vim:: .! zsh/bash					'ejecuta linea actual en zsh/bash'				" c_!! ==>>  vim:: .! "
																			vim:: r! echo %:h		:p		'path archivo actual'      " %:p  path y archivo" 	r! echo %:p   /home/aeo8/.burningArea/vim/main.c
																			vim:: r! echo #:h		:p		'path archivo anterior'

												gx "go url under the cursor (controlMode)"  gf "go file under the cursor (controlMode)"

															vim:: echo expand('%:p')				"muestra el path absoluto con el nombre de archivo ...<3 <3 <3"			 vim:: echo expand('%:h')				

						Ctrl-G/g		"prints the current file name with path, estado del archivo( [Modified],[ReadOnly] ) , lineas en total, ubicacion porcentual del focus en el archivo " ...<3 <3 <3

	vim:: wq   ==   x          " vim:: X   'cifra en archivo actual...<3 <3 <3' "


vim:: set number relativenumber numberwidth=1 sw=2 tabstop=2 softtabstop=2 noswapfile wrap
vim:: imap ;l <Esc>

:set number relativenumber numberwidth=1 sw=2 tabstop=2 softtabstop=2 noswapfile wrap  |  imap ;l <esc> | color industry

vim:: r ! cat /etc/passwd | grep "sh$"      ...<3 <3 <3  (' no es necesario escapar  |  con  \  despues del !  ')
vim:: w | ! gcc % -o %< && ./%<         "guarda el archivo actual, compila el archivo actual(%) y lo guarda como el nombre actual del archivo sin extension (%<)" "LOS ESPACIOS SON IMPORTANTES !!!"

::: cat /etc/passwd | vim -				vim:: %! grep "sh$" ...<3 <3 <3...!!!
      
              @:            repeat the previous ":" command N times 

      corregir autoidentacion en vim al copiar codigo... <3 <3 <3
      
            gg = G      'corrige todo el archivo de gg a G, igual con modiVisual (  V + =  )' 
            =  G        'corrige desde el focus hasta el final de pagina'

{
    ::: cat /etc/passwd | vim - 
			vim:: %! grep "sh$"             'jugamos con el archivo actual con comandos de shell'
}

    "Ctrl-[  == Ctrl-\-n  ===  Esc  ==  Ctrl-c"

    vim::: term   ' Ctrl \ n  ...<3 <3 <3   t_CTRL-\_CTRL-N == Esc '		'(vim:: shell)'
    vim::: term   ' Ctrl-w .  ===  Ctrl-w '  "delete lastWord"

vim::: help :      vim::: help Ctrl   vim::: help i_Ctrl-o 'insertMode'  vim::: c_CTRL-R

## PANELES DIVISIONES {
			vim:: tabclose 'close all tab pages except the current one'                 vim:: tabonly   'close all tab pages except the current one'
			vim:: only  'close all windows/paneles/divisiones except the current one'

			vim::  new   vnew               Ctrl-w-n          Ctrl-w-T 'independizar divisionActual' ...<3 <3 <3
			vim::  tabnew

			Ctrl-w-n            'division nuevoFicheroVacio'  'new   vnew'
			Ctrl-w-v  Ctrl-w-s    'fichero(%) actual dividir panel vertical/horizontal'
			Ctrl-w-q              'cerrar panel/division...<3 <3 <3'

			Ctrl w Shift h/j/k/l        "Mover panel/division Left/Down/Up/Right"... <3 <3 <3

			Ctrl-w-x  Ctrl-w-r  Ctrl-w-R   'intercambiar paneles, rotar paneles(horario/antihorario)(r/R)'

			' Ctrl _ '   ' Ctrl | '     "maximizar alto/ancho  (Ctrl =  'igualaTodos los paneles')"
			Ctrl +    Ctrl -				"incrementar altura N	'N Ctrl +' "
			Ctrl <    Ctrl >				"incrementar ancho N  'N Ctrl <' "

			Ctrl-w-f		like  gf				abre en una division/panel <stdou.h> 
			Ctrl-w-F 		like  gF           'Ctrl-w-gf/gF  ventanaNueva'

			Ctrl-w-o		"cierra todos los paneles menos el actual ...<3 <3 <3 "


			Num Ctrl-w k/j/l/h       "up/down/right/left" "Num de saltos de paneles (2 Ctrl-w j)"
			Ctrl-w p           go to previous (last accessed) window/pane  like { Alt-m ;    Alt-m Ctrl-i }(tmux),  { Win-i i3 } (i3)
			CTRL-W g <Tab>     same as " g Tab  " go to last accessed tab

					*** SALTO ENTRE PANELES/DIVISIONES LIKE TMUX  Alt-m-q ... ... ... <3 <3 <3{	 " CTRL-W w     go to N next window (wrap around) "
						  Num Ctrl-w w    " Num => 1-2-3..8-9 "					"vim:: set statusline+=\ %{winnr()}"
								Ctrl-w p		"salta al panel anterior"							Ctrl-w o   "cierra todos los paneles(sin cambios) menos el actual"

					vim:: echo (winnr())			"print the number of the current panel/division... <3 <3 <3" " set statusline+=%F  'fullPath' "

						Ctrl-w t	Move cursor to top-left window.
						Ctrl-w b  Move cursor to bottom-right window.

					*** SALTO ENTRE PANELES/DIVISIONES LIKE TMUX  Alt-m-q ... ... ... <3 <3 <3}

__ PANELES DIVISIONES## }

  ZZ         write if buffer changed and close window
  ZQ         close window without writing

  ''  ``     1 position before "latest jump"  (funciona con '' y ``)  g;  g,   Ctrl-o Ctrl-i		... <3 <3 <3

  {          1  cursor to the start of the current paragraph
  }          1  cursor to the end of the current paragraph

  m    m{A-Za-z}        set mark {A-Za-z} at cursor position
  '    '{a-zA-Z0-9}     cursor to the mark {a-zA-Z0-9} (funciona tambi[en con `)


### (" netrw == vim::Ex ") {		Ex Ex Ex								vim:: Ex /  ::Ex /home/user/downloads ::Ex ../  ::Ex ./path/here		... <3 <3 <3 
						<enter>   Open the file in the current window.     |netrw-cr|
						o   Horizontally split window and display file |netrw-o|
						v   Vertically split window and display file   |netrw-v|
						p   Use the |preview-window|       |netrw-p|
						P   Edit in the previous window      |netrw-P|
						t   Open file in a new tab         |netrw-t|

						x  "Me permite entrar a las carpetas :) ... <3 <3 <3 "
						mb "Marca la carpeta actual"
						gb "Salta a la carpeta marcada"

	Vim remembers the last directory that you used.  Use "cd -" to go back to it.
					:pwd			=> 	 /home/Bram/VeryLongFileName
					:cd /etc
					:pwd			=>	 /etc
					:cd -
					:pwd			=>	 /home/Bram/VeryLongFileName
					:cd -
					:pwd			=>	 /etc

  ....To change to the directory of the current file/path :				vim:: cd  %:h		...	<3 <3 <3

		WINDOW LOCAL DIRECTORY
					When you split a window, both windows use the same current directory.  When
				you want to edit a number of files somewhere else in the new window, you can
				make it use a different directory, without changing the current directory in
				the other window.  This is called a local directory. >

					:pwd		=>		 /home/Bram/VeryLongFileName
					:split
					:lcd /etc
					:pwd		=>		 /etc
					CTRL-W w
					:pwd		=>		 /home/Bram/VeryLongFileName
		
		TAB LOCAL DIRECTORY		vim:: tcd  /new/path/here

		:edit FileName/file1.txt		 :e FileName/file1.txt

___	(" netrw == vim::Ex ")  Ex Ex Ex  }
